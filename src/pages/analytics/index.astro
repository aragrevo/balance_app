---
import DashboardLayout from "@/layouts/DashboardLayout.astro";
import UserAvatar from "@/components/UserAvatar.astro";
import MoneySelector from "@/components/MoneySelector.astro";
import { getBalance } from "@/services/balance.service";
import type { MoneyTypes } from "@/model/money-types.enum";
import { getEndOfMonth, getStartOfMonth } from "@/lib/date";
import { getTransactions } from "@/services/transaction.service";
import { getExpenseCategories } from "@/services/admin.service";
import DistributionOverview from "@/sections/DistributionOverview.astro";
import MonthlyComparison from "@/sections/MontlyComparison.astro";

const moneyType = Astro.cookies.get("money")?.value as MoneyTypes;

const startDate = getStartOfMonth().toISOString();
const endDate = getEndOfMonth().toISOString();
const lastMonthStartDate = getStartOfMonth(1).toISOString();
const lastMonthEndDate = getEndOfMonth(1).toISOString();
const beforeLastMonthStartDate = getStartOfMonth(2).toISOString();
const beforeLastMonthEndDate = getEndOfMonth(2).toISOString();

const [
  categoriesData,
  distributionData,
  currentMonthTransactionsData,
  lastMonthTransactionsData,
  beforeLastMonthTransactionsData,
] = await Promise.all([
  getExpenseCategories(),
  getBalance(startDate, endDate, moneyType),
  getTransactions(startDate, endDate, moneyType),
  getTransactions(lastMonthStartDate, lastMonthEndDate, moneyType),
  getTransactions(beforeLastMonthStartDate, beforeLastMonthEndDate, moneyType),
]);

const { data: categories, error: categoriesError } = categoriesData;

const { data: distribution, error: distributionError } = distributionData;

const { data: currentMonthTransactions, error: currentMonthTransactionsError } =
  currentMonthTransactionsData;

const { data: lastMonthTransactions, error: lastMonthTransactionsError } =
  lastMonthTransactionsData;

const {
  data: beforeLastMonthTransactions,
  error: beforeLastMonthTransactionsError,
} = beforeLastMonthTransactionsData;

if (
  categoriesError ||
  distributionError ||
  currentMonthTransactionsError ||
  lastMonthTransactionsError ||
  beforeLastMonthTransactionsError
) {
  console.error(
    categoriesError ||
      distributionError ||
      currentMonthTransactionsError ||
      lastMonthTransactionsError ||
      beforeLastMonthTransactionsError,
  );
}

const lineChartData = [
  { value: 3000, label: "08:00" },
  { value: 2200, label: "10:00" },
  { value: 3200, label: "12:00" },
  { value: 3500, label: "15:00" },
  { value: 4200, label: "18:00" },
  { value: 3800, label: "21:00" },
  { value: 3000, label: "24:00" },
];
---

<DashboardLayout title="Analytics | Finance Tracker">
  <div class="h-full">
    <div class="container mx-auto">
      <!-- Header -->
      <header class="flex items-center justify-between px-4 py-6">
        <div class="flex items-center gap-3">
          <UserAvatar transition:name="user-avatar" />
        </div>
      </header>

      <div class="flex w-full items-center justify-between px-4">
        <h2 class="mb-0 text-4xl font-medium text-white">Analytics</h2>
        <MoneySelector />
      </div>

      <div class="scrollbar-hide max-h-[85dvh] space-y-4 overflow-y-auto pb-14">
        <DistributionOverview distribution={distribution} />

        <!-- <div class="bg-navy-800 rounded-lg p-6 shadow-lg">
          <h2 class="mb-6 text-xl text-white">Daily Balance Trend</h2>
          <div class="flex justify-center">
            <LineChart data={lineChartData} width={700} height={300} />
          </div>
        </div> -->

        <MonthlyComparison
          currentMonthTransactions={currentMonthTransactions}
          lastMonthTransactions={lastMonthTransactions}
          beforeLastMonthTransactions={beforeLastMonthTransactions}
          categories={categories}
        />
      </div>
    </div>
  </div>
</DashboardLayout>
