---
import { getExpenseCategories } from "@/services/admin.service";
import UserAvatar from "./UserAvatar.astro";
import { MoneyTypes } from "@/model/money-types.enum";

const moneyType = (Astro.params.money as MoneyTypes) || MoneyTypes.EUR;

const { data: categories, error: categoriesError } =
  await getExpenseCategories();
if (categoriesError) {
  console.error(categoriesError);
}
---

<aside
  id="pay-form"
  class="border-tertiary bg-tertiary invisible absolute top-100 right-0 bottom-100 left-0 translate-y-full overflow-hidden rounded-t-2xl border p-4 transition-all duration-300 ease-in-out"
>
  <header class="mb-8 flex items-center justify-between">
    <button
      class="hide-aside rounded-full border border-white/90 p-2 text-white hover:cursor-pointer hover:opacity-80"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-4 -rotate-90"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z"
          clip-rule="evenodd"></path>
      </svg>
    </button>
    <UserAvatar />
  </header>
  <h2 class="mb-4 text-4xl font-medium text-white">Pay</h2>

  <form id="pay-form-form" class="mb-16 flex flex-col gap-12">
    <div class="flex flex-col gap-8">
      <input type="hidden" name="money" value={moneyType} />
      <select
        id="pay-form-description"
        name="description"
        class="custom-select rounded-full border border-white/80 bg-transparent px-4 py-2 text-xl text-white placeholder:text-white/30 focus:outline-none"
      >
        <option selected disabled>Choose a category</option>
        {
          categories?.map((category) => (
            <option class="text-primary" value={category.id}>
              {category.name}
            </option>
          ))
        }
      </select>
      <input
        id="pay-form-observation"
        type="text"
        name="observation"
        placeholder="Observation"
        class="hidden rounded-full border border-white/80 bg-transparent px-4 py-2 text-xl text-white placeholder:text-white/30 focus:outline-none"
      />
      <input
        type="text"
        name="amount"
        class="rounded-lg border-0 p-2 text-center text-4xl text-white placeholder:text-white/30 focus:outline-none"
        placeholder="500.00"
      />
    </div>
    <button
      type="submit"
      class="bg-secondary text-tertiary flex items-center justify-center gap-2 rounded-full px-6 py-3 text-sm font-medium transition-colors hover:cursor-pointer hover:opacity-80"
    >
      Pay
    </button>
  </form>
</aside>

<script>
  import { $ } from "@/lib/selector";
  import { routes } from "@/model/routes";
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  const hideAside = () => {
    const aside = $("aside");
    aside.classList.add("translate-y-full");
    aside.classList.add("invisible");
    setTimeout(() => {
      aside.classList.remove("bottom-0");
      aside.classList.remove("top-0");
      aside.classList.add("bottom-100");
      aside.classList.add("top-100");
    }, 300);
  };

  document.addEventListener("astro:page-load", () => {
    const hideAsideButton = $(".hide-aside");
    const description = $("#pay-form-description") as HTMLSelectElement;
    description.addEventListener("change", () => {
      const selectedOption = description.options[description.selectedIndex];
      const observation = $("#pay-form-observation") as HTMLInputElement;
      observation.value = "";
      observation.classList.add("hidden");
      if (selectedOption.value === "shop") {
        observation.classList.remove("hidden");
      }
    });
    hideAsideButton.addEventListener("click", () => {
      hideAside();
    });
  });

  const form = $("#pay-form-form") as HTMLFormElement;
  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const { error } = await actions.saveExpense(formData);
    console.log(error);
    if (!error) {
      navigate(routes.dashboard);
    }
  });
</script>
