---
import { getExpenseCategories } from "@/services/admin.service";
import { MoneyTypes } from "@/model/money-types.enum";
import Select from "@/components/Select.astro";
import Spinner from "@/components/Spinner.astro";

const moneyType = Astro.cookies.get("money")?.value as MoneyTypes;

const { data: categories, error: categoriesError } =
  await getExpenseCategories();
if (categoriesError) {
  console.error(categoriesError);
}
---

<h2 class="mb-4 text-4xl font-medium text-white">Pay</h2>

<form id="pay-form-form" class="mb-16 flex flex-col gap-12">
  <div class="flex flex-col gap-8">
    <input type="hidden" name="money" value={moneyType} />
    <Select
      id="pay-form-description"
      name="description"
      categories={categories}
    />
    <input
      id="pay-form-observation"
      type="text"
      name="observation"
      placeholder="Observation"
      class="hidden rounded-full border border-white/80 bg-transparent px-4 py-2 text-xl text-white placeholder:text-white/30 focus:outline-none"
    />
    <input
      type="text"
      name="amount"
      class="mt-2 rounded-lg border-0 p-2 text-center text-4xl text-white placeholder:text-white/30 focus:outline-none"
      placeholder="500.00"
    />
  </div>
  <button
    type="submit"
    class="group bg-secondary text-tertiary disabled:gray mt-8 flex items-center justify-center gap-2 rounded-full px-6 py-3 text-sm font-medium transition-colors hover:cursor-pointer hover:opacity-80 disabled:cursor-not-allowed disabled:opacity-50"
  >
    <span class="hidden items-center gap-2 group-disabled:flex">
      <Spinner class="h-4 w-4" />
    </span>
    Pay
  </button>
</form>

<script>
  import { $ } from "@/lib/selector";
  import { routes } from "@/model/routes";
  import { toast } from "@/services/toast.service";
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    const form = $("#pay-form-form") as HTMLFormElement;
    const button = form?.querySelector("button") as HTMLButtonElement;
    const description = $("#pay-form-description") as HTMLSelectElement;
    const observation = $("#pay-form-observation") as HTMLInputElement;
    description.addEventListener("change", () => {
      const selectedOption = description.options[description.selectedIndex];
      observation.value = "";
      observation.classList.add("hidden");
      if (selectedOption.value === "shop") {
        observation.classList.remove("hidden");
      }
    });
    form?.addEventListener("submit", async (event) => {
      event.preventDefault();
      button.disabled = true;
      const formData = new FormData(form);
      const { error } = await actions.saveExpense(formData);
      console.log(error);
      if (error) {
        button.disabled = false;
        const msg = (error as any).issues.map((e: any) => e.message).join(", ");
        toast.showHide(`Error saving transaction: ${msg}`);
        return;
      }
      navigate(routes.dashboard);
    });
  });
</script>
