---
import { getBalance } from "@/services/balance.service";
import { getStartOfMonth, getEndOfMonth } from "@/lib/date";
import { MoneyTypes } from "@/model/money-types.enum";
import { getTransactions } from "@/services/transaction.service";
import { getIncomes } from "@/services/incomes.service";
import { formatNumber } from "@/lib/formatter";

const startDate = getStartOfMonth().toISOString();
const endDate = getEndOfMonth().toISOString();

const [
  eurBalanceData,
  copBalanceData,
  eurTransactionsData,
  copTransactionsData,
  incomesData,
] = await Promise.all([
  getBalance(startDate, endDate, MoneyTypes.EUR),
  getBalance(startDate, endDate, MoneyTypes.COP),
  getTransactions(startDate, endDate, MoneyTypes.EUR),
  getTransactions(startDate, endDate, MoneyTypes.COP),
  getIncomes(startDate, endDate),
]);

const { data: eurBalance, error: eurError } = eurBalanceData;
const { data: copBalance, error: copError } = copBalanceData;
const { data: eurTransactions, error: eurTransactionsError } =
  eurTransactionsData;
const { data: copTransactions, error: copTransactionsError } =
  copTransactionsData;
const { data: incomes, error: incomesError } = incomesData;

const amounts = [
  {
    type: "EUR Incomes",
    values:
      incomes?.filter((t) => t.money === MoneyTypes.EUR).map((t) => t.cost) ||
      [],
  },
  { type: "EUR Expenses", values: eurTransactions?.map((t) => t.cost) || [] },
  {
    type: "COP Incomes",
    values:
      incomes?.filter((t) => t.money === MoneyTypes.COP).map((t) => t.cost) ||
      [],
  },
  { type: "COP Expenses", values: copTransactions?.map((t) => t.cost) || [] },
];
---

<section class="text-white">
  <header class="mb-4 flex items-center justify-between">
    <h3 class="text-2xl font-medium">Financial health</h3>
    <div class="flex items-center gap-2">
      <span class="text-gray-400">Latest 30 days</span>
      <svg class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
        <path d="M7 14l5-5 5 5H7z"></path>
      </svg>
    </div>
  </header>
  <div class="grid grid-cols-2 gap-3">
    <article
      class="flex flex-col justify-center overflow-hidden rounded-md border border-white/10 bg-gradient-to-br from-[#151521] via-[#000033] to-transparent p-4 text-white shadow-2xl shadow-white/5 backdrop-blur-xs"
    >
      <h6 class="text-lg font-bold">EUR</h6>
      <div class="flex items-center justify-between gap-2">
        <div class="flex flex-col items-center gap-2">
          <span class="text-sm text-white/50">Incomes</span>
          <span class="font-medium">{formatNumber(eurBalance?.incomes, 2)}</span
          >
        </div>
        <div class="flex flex-col items-center gap-2">
          <span class="text-sm text-white/50">Expenses</span>
          <span class="font-medium"
            >{formatNumber(eurBalance?.expenses, 2)}</span
          >
        </div>
      </div>
    </article>

    <article
      class="flex flex-col justify-center overflow-hidden rounded-md border border-white/10 bg-gradient-to-br from-[#010101] via-[#090909] to-transparent p-4 text-white shadow-2xl shadow-white/5 backdrop-blur-3xl"
    >
      <h6 class="text-lg font-bold">COP</h6>
      <div class="flex items-center justify-between gap-2">
        <div class="flex flex-col items-center gap-2">
          <span class="text-sm text-white/50">Incomes</span>
          <span class="font-medium">{formatNumber(copBalance?.incomes, 0)}</span
          >
        </div>
        <div class="flex flex-col items-center gap-2">
          <span class="text-sm text-white/50">Expenses</span>
          <span class="font-medium"
            >{formatNumber(copBalance?.expenses, 0)}</span
          >
        </div>
      </div>
    </article>

    <article
      class="col-span-2 flex items-end justify-between gap-6 overflow-hidden rounded-md border border-white/10 bg-transparent bg-gradient-to-br p-4 text-white shadow-2xl shadow-white/5 backdrop-blur-3xl"
    >
      {
        amounts.map(({ type, values }) => (
          <div class="flex flex-1 flex-col items-center gap-2">
            <div class="flex w-full flex-col gap-1">
              {values.map((value) => (
                <div
                  class={`group relative h-3.5 w-full rounded-sm ${value < 35 ? "bg-indigo-500/20" : "bg-red-500/20"}`}
                >
                  <tool-tip class="pointer-events-none absolute bottom-full left-1/2 z-10 -translate-x-1/2 rounded-md bg-gray-800 px-2 py-0.5 text-xs text-white opacity-0 shadow transition-opacity duration-300 select-none group-hover:opacity-100 group-active:opacity-100">
                    {value}
                  </tool-tip>
                </div>
              ))}
            </div>
            <span class="pointer-events-none text-sm text-gray-400 select-none">
              {type}
            </span>
          </div>
        ))
      }
    </article>
  </div>
</section>
